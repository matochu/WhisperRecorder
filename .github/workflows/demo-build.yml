name: Demo Build

on:
  workflow_dispatch: # Manual trigger only
    inputs:
      branch:
        description: "Branch to build from (feature branches only)"
        required: true
        type: string
        default: "feature/demo"
      description:
        description: "Build description (optional)"
        required: false
        type: string
        default: "Demo build for testing"

env:
  APP_NAME: WhisperRecorder

jobs:
  demo-build:
    runs-on: macos-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch }}
          fetch-depth: 0 # Full history for proper version detection

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: "latest-stable"

      - name: Generate demo version
        id: version
        run: |
          cd WhisperRecorder
          
          # Check that this is NOT main branch (demo builds are for feature branches only)
          BRANCH_NAME="${{ github.event.inputs.branch }}"
          if [ "$BRANCH_NAME" = "main" ] || [ "$BRANCH_NAME" = "master" ]; then
            echo "❌ ERROR: Demo builds are for feature branches only!"
            echo "Use the 'WhisperRecorder Release' workflow for main/master branch releases."
            exit 1
          fi
          
          # Get current version from VERSION file or fallback
          if [ -f "VERSION" ]; then
            BASE_VERSION=$(cat VERSION)
          else
            BASE_VERSION="1.3.1"  # Fallback version
          fi
          
          # Get short commit hash
          COMMIT_HASH=$(git rev-parse --short HEAD)
          
          # Get branch name and clean it  
          CLEAN_BRANCH=$(echo "$BRANCH_NAME" | sed 's/[^a-zA-Z0-9-]/-/g' | sed 's/--*/-/g')
          
          # Create demo version: base_version-branch-commit (no timestamp)
          DEMO_VERSION="$BASE_VERSION-$CLEAN_BRANCH-$COMMIT_HASH"
          
          echo "Selected branch: $BRANCH_NAME"
          echo "Base version: $BASE_VERSION"
          echo "Clean branch name: $CLEAN_BRANCH"  
          echo "Commit: $COMMIT_HASH"
          echo "Demo version: $DEMO_VERSION"
          
          echo "BASE_VERSION=$BASE_VERSION" >> $GITHUB_OUTPUT
          echo "DEMO_VERSION=$DEMO_VERSION" >> $GITHUB_OUTPUT
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "COMMIT_HASH=$COMMIT_HASH" >> $GITHUB_OUTPUT

      - name: Build WhisperRecorder
        run: |
          cd WhisperRecorder
          
          # Create app icon if script exists
          if [ -f "create_icon.sh" ]; then
            chmod +x create_icon.sh
            ./create_icon.sh
          fi

          # Build the app
          ./whisper build

          # Verify build succeeded
          if [ ! -d "WhisperRecorder.app" ]; then
            echo "❌ Build failed - app not created"
            exit 1
          fi
          
          echo "✅ Build completed successfully"

      - name: Create demo release package
        run: |
          cd WhisperRecorder
          DEMO_VERSION="${{ steps.version.outputs.DEMO_VERSION }}"

          # Create release ZIP
          ./whisper release

          # Rename to include demo version
          if [ -f "WhisperRecorder.zip" ]; then
            mv WhisperRecorder.zip "WhisperRecorder-demo-$DEMO_VERSION-macOS-arm64.zip"
            echo "✅ Created package: WhisperRecorder-demo-$DEMO_VERSION-macOS-arm64.zip"
          else
            echo "❌ Failed to create ZIP package"
            exit 1
          fi

      - name: Generate demo release notes
        run: |
          cd WhisperRecorder
          DEMO_VERSION="${{ steps.version.outputs.DEMO_VERSION }}"
          BASE_VERSION="${{ steps.version.outputs.BASE_VERSION }}"
          BRANCH_NAME="${{ steps.version.outputs.BRANCH_NAME }}"
          COMMIT_HASH="${{ steps.version.outputs.COMMIT_HASH }}"
          BUILD_DESCRIPTION="${{ github.event.inputs.description }}"
          
          # Create release notes
          cat > demo_release_notes.md << EOF
# 🧪 WhisperRecorder Demo Build

**Version:** \`$DEMO_VERSION\`  
**Base Version:** \`$BASE_VERSION\`  
**Branch:** \`$BRANCH_NAME\`  
**Commit:** \`$COMMIT_HASH\`  
**Build Time:** \`$(date '+%Y-%m-%d %H:%M:%S UTC')\`

## 📝 Description
$BUILD_DESCRIPTION

## ⚠️ Important Notes
- **This is a DEMO/TEST build** - not for production use
- Built from feature branch \`$BRANCH_NAME\`
- May contain experimental features or bugs
- For testing and feedback purposes only

## 🚀 Recent Changes
EOF

          # Add recent commits from this branch
          echo "" >> demo_release_notes.md
          echo "### Latest commits in this branch:" >> demo_release_notes.md
          git log --oneline -10 --pretty=format:"- %s (%h)" >> demo_release_notes.md
          
          cat >> demo_release_notes.md << EOF

## 📦 Installation
1. Download \`WhisperRecorder-demo-$DEMO_VERSION-macOS-arm64.zip\`
2. Unzip and move \`WhisperRecorder.app\` to Applications folder  
3. Right-click app → Open (first time only to bypass Gatekeeper)

## 💬 Feedback
Please report any issues or feedback on the repository's Issues page.

## 🔧 System Requirements
- macOS 12.0+ (Monterey or later)
- Apple Silicon (M1/M2/M3) Mac
- Microphone access permission

---
*This demo build was automatically generated from branch \`$BRANCH_NAME\`*
EOF

      - name: Create GitHub Demo Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: "demo-${{ steps.version.outputs.DEMO_VERSION }}"
          name: "🧪 WhisperRecorder ${{ steps.version.outputs.DEMO_VERSION }}"
          body_path: WhisperRecorder/demo_release_notes.md
          files: |
            WhisperRecorder/WhisperRecorder-demo-${{ steps.version.outputs.DEMO_VERSION }}-macOS-arm64.zip
          draft: false
          prerelease: true  # Always mark demo builds as pre-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Summary
        run: |
          echo "🎉 Demo build completed successfully!"
          echo ""
          echo "📋 Build Details:"
          echo "  • Version: ${{ steps.version.outputs.DEMO_VERSION }}"
          echo "  • Branch: ${{ steps.version.outputs.BRANCH_NAME }}"
          echo "  • Commit: ${{ steps.version.outputs.COMMIT_HASH }}"
          echo ""
          echo "📦 Download:"
          echo "  https://github.com/${{ github.repository }}/releases/tag/demo-${{ steps.version.outputs.DEMO_VERSION }}" 