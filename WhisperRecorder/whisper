#!/bin/bash

# WhisperRecorder - Universal Script for Building, Running and Debugging
# Usage: ./whisper [command] [options]

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Project info
APP_NAME="WhisperRecorder"
APP_VERSION="1.3.1"

# Show help
show_help() {
    echo -e "${BLUE}üéôÔ∏è  WhisperRecorder - Voice Recording & Transcription Tool${NC}"
    echo -e "${BLUE}===================================================${NC}"
    echo ""
    echo "Usage: ./whisper [command] [options]"
    echo ""
    echo -e "${GREEN}üì¶ Build Commands:${NC}"
    echo "  build              Build WhisperRecorder.app (safe by default)"
    echo "  build-debug        Build WhisperRecorder.app with debug mode enabled"
    echo "  clean              Clean all build artifacts"
    echo ""
    echo -e "${GREEN}üöÄ Run Commands:${NC}"
    echo "  run                Run WhisperRecorder.app (safe by default)"
    echo "  start              Alias for 'run'"
    echo ""
    echo -e "${GREEN}üîç Debug Commands:${NC}"
    echo "  debug              Interactive debug with terminal output"
    echo "  lldb               Debug with LLDB debugger"
    echo ""
    echo -e "${GREEN}üö® Emergency Commands:${NC}"
    echo "  cleanup            Kill all hanging processes and clean build"
    echo "  status             Show current processes and build status"
    echo ""
    echo -e "${GREEN}‚ÑπÔ∏è  Info Commands:${NC}"
    echo "  help               Show this help"
    echo "  version            Show version info"
    echo ""
    echo -e "${YELLOW}Examples:${NC}"
    echo "  ./whisper build    # Build the app"
    echo "  ./whisper run      # Run the app"
    echo "  ./whisper debug    # Debug interactively"
    echo "  ./whisper cleanup  # Emergency cleanup"
}

# Show version
show_version() {
    echo -e "${BLUE}WhisperRecorder v${APP_VERSION}${NC}"
    echo "Voice Recording & Transcription Tool"
    if [ -f "WhisperRecorder.app/Contents/Info.plist" ]; then
        echo -e "${GREEN}‚úÖ App is built and ready${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  App needs to be built${NC}"
    fi
}

# Check for hanging processes
check_processes() {
    local running=$(pgrep -f "WhisperRecorder|lipo" 2>/dev/null || true)
    if [ -n "$running" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  Found running processes: $running${NC}"
        return 1
    fi
    return 0
}

# Kill hanging processes
kill_processes() {
    local running=$(pgrep -f "WhisperRecorder|lipo" 2>/dev/null || true)
    if [ -n "$running" ]; then
        echo -e "${YELLOW}üî´ Killing processes: $running${NC}"
        echo "$running" | xargs kill -TERM 2>/dev/null
        sleep 2
        echo "$running" | xargs kill -KILL 2>/dev/null
        sleep 1
        
        local still_running=$(pgrep -f "WhisperRecorder|lipo" 2>/dev/null || true)
        if [ -n "$still_running" ]; then
            echo -e "${RED}‚ùå Could not kill processes: $still_running${NC}"
            echo "You may need to restart your Mac"
            return 1
        fi
    fi
    return 0
}

# Create lockfile
create_lockfile() {
    local lockfile="/tmp/whisperrecorder-$1.lock"
    if [ -f "$lockfile" ]; then
        echo -e "${RED}‚ùå ERROR: Another $1 operation is running!${NC}"
        echo "If this is wrong, remove: $lockfile"
        exit 1
    fi
    echo $$ > "$lockfile"
    trap "rm -f $lockfile" EXIT
}

# Build command
cmd_build() {
    echo -e "${GREEN}üõ°Ô∏è  Safe Build WhisperRecorder.app${NC}"
    echo "=================================="
    
    if ! check_processes; then
        kill_processes || exit 1
    fi
    
    create_lockfile "build"
    
    echo "Starting build process..."
    # Let package_manual.sh handle the entire build process
    SKIP_CHECKS=1 ./package_manual.sh
    
    if [ -d "WhisperRecorder.app" ]; then
        echo -e "${GREEN}‚úÖ Build successful!${NC}"
        echo ""
        echo "üö¶ To run: ./whisper run"
    else
        echo -e "${RED}‚ùå Build failed${NC}"
        exit 1
    fi
}

# Build debug command
cmd_build_debug() {
    echo -e "${GREEN}üõ°Ô∏è  Safe Build WhisperRecorder.app (DEBUG MODE)${NC}"
    echo "=============================================="
    
    if ! check_processes; then
        kill_processes || exit 1
    fi
    
    create_lockfile "build-debug"
    
    echo "Starting debug build process..."
    # Let package_manual.sh handle the entire build process with debug flag
    DEBUG_BUILD=1 SKIP_CHECKS=1 ./package_manual.sh
    
    if [ -d "WhisperRecorder.app" ]; then
        echo -e "${GREEN}‚úÖ Debug build successful!${NC}"
        echo -e "${YELLOW}üêõ Debug mode is ENABLED - full logging will be available${NC}"
        echo ""
        echo "üö¶ To run with debug: ./whisper debug"
        echo "üö¶ To run normally: ./whisper run"
    else
        echo -e "${RED}‚ùå Debug build failed${NC}"
        exit 1
    fi
}

# Run command
cmd_run() {
    echo -e "${GREEN}üö¶ Safe Run WhisperRecorder${NC}"
    echo "==========================="
    
    if ! check_processes; then
        kill_processes || exit 1
    fi
    
    if [ ! -d "WhisperRecorder.app" ]; then
        echo -e "${RED}‚ùå WhisperRecorder.app not found!${NC}"
        echo "Build first with: ./whisper build"
        exit 1
    fi
    
    echo "üöÄ Starting WhisperRecorder..."
    open WhisperRecorder.app
    
    echo -e "${GREEN}‚úÖ WhisperRecorder started successfully!${NC}"
    echo ""
    echo "üí° To monitor: watch 'ps aux | grep WhisperRecorder'"
}

# Debug command  
cmd_debug() {
    echo -e "${GREEN}üõ°Ô∏è  Safe Interactive Debug${NC}"
    echo "=========================="
    
    if ! check_processes; then
        kill_processes || exit 1
    fi
    
    create_lockfile "debug"
    
    if [ ! -d "WhisperRecorder.app" ]; then
        echo -e "${RED}‚ùå WhisperRecorder.app not found!${NC}"
        echo "Build first with: ./whisper build"
        exit 1
    fi
    
    export WHISPER_DEBUG=1
    export WHISPER_STDOUT_LOGS=1
    
    echo "üöÄ Starting debug session..."
    echo "üí° All debug logs will appear below"
    echo "üõë Press Ctrl+C to stop"
    echo ""
    
    "./WhisperRecorder.app/Contents/MacOS/WhisperRecorder.bin" 2>&1
    
    echo ""
    echo -e "${YELLOW}üèÅ Debug session ended${NC}"
}

# LLDB debug command
cmd_lldb() {
    echo -e "${GREEN}üõ°Ô∏è  Safe LLDB Debug${NC}"
    echo "=================="
    
    if ! check_processes; then
        kill_processes || exit 1
    fi
    
    create_lockfile "lldb"
    
    if ! command -v lldb &> /dev/null; then
        echo -e "${RED}‚ùå LLDB not found!${NC}"
        echo "Install Xcode Command Line Tools: xcode-select --install"
        exit 1
    fi
    
    if [ ! -f "WhisperRecorder.app/Contents/MacOS/WhisperRecorder.bin" ]; then
        echo -e "${RED}‚ùå Binary not found!${NC}"
        echo "Build first with: ./whisper build"
        exit 1
    fi
    
    export WHISPER_DEBUG=1
    export WHISPER_STDOUT_LOGS=1
    
    echo -e "${BLUE}üí° LLDB Commands:${NC}"
    echo "   (lldb) run         # Start the app"
    echo "   (lldb) bt          # Show backtrace" 
    echo "   (lldb) c           # Continue"
    echo "   (lldb) quit        # Exit LLDB"
    echo ""
    
    lldb "./WhisperRecorder.app/Contents/MacOS/WhisperRecorder.bin"
}

# Cleanup command
cmd_cleanup() {
    echo -e "${YELLOW}üö® Emergency Cleanup${NC}"
    echo "==================="
    
    # Kill all lipo processes
    local lipo_pids=$(pgrep lipo 2>/dev/null || true)
    if [ -n "$lipo_pids" ]; then
        echo "üî´ Killing lipo processes: $lipo_pids"
        echo "$lipo_pids" | xargs kill -TERM 2>/dev/null
        sleep 2
        echo "$lipo_pids" | xargs kill -KILL 2>/dev/null
    fi
    
    # Kill all WhisperRecorder processes
    kill_processes
    
    # Clean build artifacts
    echo "üßπ Cleaning build artifacts..."
    rm -rf .build
    rm -rf WhisperRecorder.app
    rm -f WhisperRecorder
    
    # Remove lockfiles
    rm -f /tmp/whisperrecorder-*.lock
    
    local remaining=$(pgrep -f "WhisperRecorder|lipo" 2>/dev/null || true)
    if [ -n "$remaining" ]; then
        echo -e "${RED}‚ö†Ô∏è  Some processes still running: $remaining${NC}"
        echo "You may need to restart your Mac"
    else
        echo -e "${GREEN}‚úÖ Cleanup completed successfully${NC}"
    fi
}

# Status command
cmd_status() {
    echo -e "${BLUE}üìä WhisperRecorder Status${NC}"
    echo "========================"
    
    # Check app
    if [ -d "WhisperRecorder.app" ]; then
        echo -e "${GREEN}‚úÖ App built and ready${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  App not built${NC}"
    fi
    
    # Check processes
    local running=$(pgrep -f WhisperRecorder 2>/dev/null || true)
    if [ -n "$running" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  Running processes: $running${NC}"
    else
        echo -e "${GREEN}‚úÖ No running processes${NC}"
    fi
    
    # Check lockfiles
    local locks=$(ls /tmp/whisperrecorder-*.lock 2>/dev/null || true)
    if [ -n "$locks" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  Active locks: $locks${NC}"
    else
        echo -e "${GREEN}‚úÖ No active locks${NC}"
    fi
}

# Clean command
cmd_clean() {
    echo "üßπ Cleaning build artifacts..."
    rm -rf .build
    rm -rf WhisperRecorder.app  
    rm -f WhisperRecorder
    echo -e "${GREEN}‚úÖ Clean completed${NC}"
}

# Main command dispatcher
case "${1:-help}" in
    build)
        cmd_build
        ;;
    build-debug)
        cmd_build_debug
        ;;
    run|start)
        cmd_run
        ;;
    debug)
        cmd_debug
        ;;
    lldb)
        cmd_lldb
        ;;
    cleanup)
        cmd_cleanup
        ;;
    clean)
        cmd_clean
        ;;
    status)
        cmd_status
        ;;
    version)
        show_version
        ;;
    help|--help|-h)
        show_help
        ;;
    *)
        echo -e "${RED}‚ùå Unknown command: $1${NC}"
        echo ""
        show_help
        exit 1
        ;;
esac 